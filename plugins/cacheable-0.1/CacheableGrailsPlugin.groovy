import java.util.logging.Logger
import grails.spring.BeanBuilder
import org.codehaus.groovy.grails.plugins.support.*
import org.codehaus.groovy.grails.commons.spring.GrailsWebApplicationContext
import org.codehaus.groovy.grails.plugins.cacheable.manager.CacheableManager

class CacheableGrailsPlugin {

	private static final Logger log = Logger.getLogger(CacheableGrailsPlugin.class.name);
	
	def version = 0.1
    def title = 'Simple plugin for caching output using EHCache'
    def author = 'Sven Schomaker'
    def authorEmail = 'Sven.Schomaker[at]syrics.de'
    def description = """The Cacheable plugin is a simple plugin that leverages the 
	power of ehcache, to enable application level caching for Grails. As part of the
	plugin comes a configurable ServletFilter, that caches responses generated by the
	application."""

	def grailsVersion = GrailsPluginUtils.getGrailsVersion()
    def dependsOn = [core:grailsVersion]
	
	def doWithSpring = { 
		log.info("Cacheable: Adding CacheableManager bean instance")
        cacheableManager(CacheableManager) { bean ->
    		bean.factoryMethod = "getInstance"
            bean.singleton = true
        }
	}
	def doWithWebDescriptor = { webXml ->
		// Wire the CacheableServletFilter into the web.xml file
		log.info("Cacheable: Adding CacheableServletFilter registration")
		def filters = webXml.filter[0]
	    filters + {
			'filter' {
				'filter-name'("CacheableServletFilter")
				'filter-class'("org.codehaus.groovy.grails.plugins.cacheable.filter.CacheableServletFilter")
			}
      	}
		def mappings = webXml.'filter-mapping'[0]
		mappings + {
			'filter-mapping' {
			    'filter-name'("CacheableServletFilter")
			    'url-pattern'("/*")
	    	}
      	}
	}
	def doWithApplicationContext = { appCtx ->
		log.info("Cacheable: Configuring manager default settings")
		configureManagerDefaults(appCtx)
	}
	
	private configureManagerDefaults(appCtx) {
		def config = new CacheableConfiguration()
		def cacheSettings = [:]
		config.class.methods.each {
			if (it.name ==~ /get\w+CacheSettings/) {
				def name = it.name.replace('CacheSettings', '').substring(3)
				name = name[0].toLowerCase() + name.substring(1)
				cacheSettings[(name)] = it.invoke(config)
			}
		}
		
		def configuration = [cacheSettings: cacheSettings,
	            httpRequestMethods: config.httpRequestMethods,
	        	httpResponseMinimumSize: config.httpResponseMinimumSize,
				httpRequestKeyGenerator: config.httpRequestKeyGenerator]
		
		def cacheableManager = appCtx.getBean("cacheableManager")
		cacheableManager.setConfiguration(configuration)
		
	}
	
}
